buildscript {
    ext {
        springBootVersion = '1.5.6.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

/*
to run sonar runner:

./gradlew sonarqube -Dsonar.host.url=http://localhost:32770 -Dsonar.login=fc7f8eb0a83a42342eb8ec8e75e1f1f05442834a

 */
plugins {
    id "org.sonarqube" version "2.5"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'

version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter')
    compile('org.springframework.boot:spring-boot-starter-web')
    testCompile('org.springframework.boot:spring-boot-starter-test')
}

configurations {
    itestCompile.extendsFrom testCompile
    itestRuntime.extendsFrom testRuntime
}

sourceSets {
    itest {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
        // You can add other directories to the classpath like this:
        //runtimeClasspath += files('src/itest/resources/com/buransky')
        // Use "java" if you don't use Scala as a programming language
        java.srcDir file('src/itest/java')
    }
    // This is just to trick IntelliJ IDEA to add integration test
    // resources to classpath when running integration tests from
    // the IDE. It's is not a good solution but I don't know about
    // a better one.
    test {
        resources.srcDir file('src/itest/resources')
    }
}


task itest(type: Test) {
    testClassesDir = sourceSets.itest.output.classesDir
    classpath = sourceSets.itest.runtimeClasspath
    // This is not needed, but I like to see which tests have run
    testLogging {
        events "passed", "skipped", "failed"
    }
}